@{
	var posts = (IEnumerable<IDocument>)ViewData["PostListDocuments"];
	
	Func<IDocument, object> getTags = (doc) =>
	{
		if (!doc.ContainsKey("tags"))
			return null;
			
		var tags = doc.Get<string[]>("tags");
		var items = new List<string>();

		foreach (var tag in tags)
		{
			items.Add(string.Format("<a href=\"/tag/{1}/\" rel=\"tag\" class=\"p-category\">{0}</a>", tag, MyHelper.CleanTag(tag)));
		}

		return Html.Raw(string.Join(", ", items));
	};
}

<ol class="listing">
	@foreach(var post in posts)
	{
		var date = post.Get<DateTime>("date");
		var readingTime = post.Get<ReadingTimeMeta>(ReadingTimeKeys.ReadingTime);
		
		<li>
			<h3><a href="@post["permalink"]" rel="bookmark">@Html.Raw(post.String("title"))</a></h3>
			<p class="meta">
				<span>Posted on <time datetime="@date.ToString("yyyy-MM-ddTHH:mm%K")">@date.ToString("dd/MM/yyyy")</time>.</span>
				<span>Estimated read time:  @(readingTime.Minutes <= 1 ? "under a minute" : $"{readingTime.Minutes.ToString("#,#")} minutes") (@(readingTime.Words.ToString("#,#0")) words)</span>
			</p>
			@if (post.ContainsKey("Excerpt"))
			{
				<p class="excerpt">@Html.Raw(post["Excerpt"])</p>
			}
			@if (post.ContainsKey("tags"))
			{
				<p class="tags"><span>Tags:</span> @getTags(post)</p>
			}
		</li>
	}
</ol>
