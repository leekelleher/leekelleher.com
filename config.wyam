===

using System.Text;

public static class Helpers
{	
	public static string Excerpt(this HtmlHelper helper, string input, int count, string appender)
	{
		if (input == null)
			return "";

		var decoded = System.Web.HttpUtility.HtmlDecode(input);
		var stripped = StripHtml(helper, decoded);
		var excerpt = GetFirstWords(helper, stripped, count, appender);
		
		return excerpt;
	}
	
	public static string Decode(this HtmlHelper helper, string input)
	{
		return System.Web.HttpUtility.HtmlDecode(input);
	}
	
	public static string StripHtml(this HtmlHelper helper, string input)
	{
		var less = '<';
		var greater = '>';
		var sb = new StringBuilder(input.Length);
		var inside = false;
		for (var i = 0; i < input.Length; i++)
		{
			char let = input[i];
			if (let == less)
			{
				inside = true;
				continue;
			}

			if (let == greater)
			{
				inside = false;
				continue;
			}

			if (inside == false)
			{
				sb.Append(let);
			}
		}

		return sb.ToString();
	}
	
	public static string GetFirstWords(this HtmlHelper helper, string input, int count, string appender)
	{
		if (string.IsNullOrEmpty(input))
		{
			return string.Empty;
		}

		var chars = new char[] { '\n', '\r', '\t', ' ' };
		var words = input.Split(chars, StringSplitOptions.RemoveEmptyEntries);

		if ((words == null) || (words.Length <= 0))
		{
			return string.Empty;
		}

		if (words.Length <= count)
		{
			return input;
		}

		var sb = new StringBuilder();

		for (int i = 0; i < Math.Min(words.Length, count); i++)
		{
			sb.AppendFormat("{0}{1}", words[i], (i < (count - 1)) ? " " : appender);
		}

		return sb.ToString();
	}
}


---

// Pipeline: New Blog Posts
Pipelines.Add("Blog_Posts"
	,ReadFiles("posts/*.md")
	,Meta("RelativeFilePath", (@doc, @ctx) => {
		var path = @doc.Get<string>("RelativeFilePathBase").Replace("posts\\", "");
		var parts = path.Split('-');
		var newpath = new List<string>(parts.Take(3));
		newpath.Add(string.Join("-", parts.Skip(3)));
		newpath.Add("index");
		return string.Join("/", newpath);
	})
	,FrontMatter(Yaml())
	,Markdown()
	,Razor()
	,Excerpt("p")
	,WriteFiles(".html")
);


// Pipeline: Archives (by date)

Pipelines.Add("Archive_Pages"
	,ReadFiles("archive.cshtml")
	,Branch(
		GroupBy(
			@doc.Get<DateTime>("wp_post_date_gmt").ToString("yyyy")
			,Documents("Blog_Posts")
		)
		,Meta("HeadingFormat", "yyyy")
		,Razor()
		,WriteFiles(string.Format("{0}/index.html", @doc["GroupKey"]))
	)
	,Branch(
		GroupBy(
			@doc.Get<DateTime>("wp_post_date_gmt").ToString("yyyy/MM")
			,Documents("Blog_Posts")
		)
		,Meta("HeadingFormat", "MMMM yyyy")
		,Razor()
		,WriteFiles(string.Format("{0}/index.html", @doc["GroupKey"]))
	)
	,Branch(
		GroupBy(
			@doc.Get<DateTime>("wp_post_date_gmt").ToString("yyyy/MM/dd")
			,Documents("Blog_Posts")
		)
		,Meta("HeadingFormat", "dd MMMM yyyy")
		,Razor()
		,WriteFiles(string.Format("{0}/index.html", @doc["GroupKey"]))
	)
);

// Pipeline: Archives (by category/tag)
// Pipeline: RSS Feed
// Pipeline: XML Sitemap

Pipelines.Add("Content_Pages"
	,ReadFiles("pages/*.md")
	,FrontMatter(Yaml())
	,Markdown()
		.EscapeAt(false)
	,Razor()
	,WriteFiles(@doc.Get<string>("RelativeFilePathBase").Replace("pages\\", "") + "\\index.html")
);

Pipelines.Add("Homepage"
	,ReadFiles("index.cshtml")
	,Razor()
	,WriteFiles(".html")
);
