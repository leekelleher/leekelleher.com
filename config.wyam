#n -p Wyam.Html
#n -p Wyam.Less
#n -p Wyam.Markdown
#n -p Wyam.Minification
#n -p Wyam.Razor
#n -p Wyam.Yaml
#n ColorCode

#a "System.Collections, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"
#a "System.ServiceModel, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"
#a "System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"

using AngleSharp.Parser.Html;
using AngleSharp.Dom;
using AngleSharp.Dom.Html;
using ColorCode;

public static class MyHelper
{
	public static string GetFirstWords(string text, int count, string appender)
	{
		if (string.IsNullOrEmpty(text))
		{
			return string.Empty;
		}

		var chars = new char[] { '\n', '\r', '\t', ' ' };
		var words = text.Split(chars, StringSplitOptions.RemoveEmptyEntries);

		if ((words == null) || (words.Length <= 0))
		{
			return string.Empty;
		}

		if (words.Length <= count)
		{
			return text;
		}

		var sb = new System.Text.StringBuilder();

		for (int i = 0; i < Math.Min(words.Length, count); i++)
		{
			sb.AppendFormat("{0}{1}", words[i], (i < (count - 1)) ? " " : appender);
		}

		return sb.ToString();
	}

    public static string StripHtml(string input)
	{
		var less = '<';
		var greater = '>';
		var sb = new System.Text.StringBuilder(input.Length);
		var inside = false;
		for (var i = 0; i < input.Length; i++)
		{
			char let = input[i];
			if (let == less)
			{
				inside = true;
				continue;
			}

			if (let == greater)
			{
				inside = false;
				continue;
			}

			if (inside == false)
			{
				sb.Append(let);
			}
		}

		return sb.ToString();
	}

	public static string CleanTag(string rawTag)
	{
		return rawTag
			.ToLowerInvariant()
			.Replace(' ', '-')
			.Replace("c#", "c-sharp");
	}
	
	public static string Highlight(CodeColorizer colorizer, string input, string className, HtmlParser htmlParser)
	{
		try
		{
			string output = string.Empty;
			
			switch (className)
			{
				case "language-js":
				case "language-javascript":
					output = colorizer.Colorize(input, Languages.JavaScript);
					break;
				case "language-html":
					output = colorizer.Colorize(input.Replace("&lt;", "<").Replace("&gt;", ">").Replace("&amp;", "&"), Languages.Html);
					break;
				case "language-csharp":
					output = colorizer.Colorize(input, Languages.CSharp);
					break;
				case "language-sql":
					output = colorizer.Colorize(input, Languages.Sql);
					break;
				case "language-xml":
					output = colorizer.Colorize(input.Replace("&lt;", "<").Replace("&gt;", ">").Replace("&amp;", "&"), Languages.Xml);
					break;
				case "language-php":
					output = colorizer.Colorize(input, Languages.Php);
					break;
				case "language-css":
					output = colorizer.Colorize(input, Languages.Css);
					break;
				case "language-powershell":
					output = colorizer.Colorize(input, Languages.PowerShell);
					break;
			}
			
			return htmlParser.Parse(output).QuerySelector("div > pre").InnerHtml;
		}
		catch { }

		return input;
	}
}

HtmlParser htmlParser = new HtmlParser();
CodeColorizer colorizer = new CodeColorizer();

Settings[Keys.Host] = "leekelleher.com";
Settings[Keys.LinksUseHttps] = false;

Pipelines.Add("LessCss",
    ReadFiles("_assets/assets/css/*.less"),
	Less(),
    MinifyCss(),
    WriteFiles(@doc.String("RelativeFilePathBase").Replace("_assets/", "") + ".css")
);

Pipelines.Add("Posts",
	ReadFiles("_posts/*.md"),
	FrontMatter(Yaml()),
	ValidateMeta<DateTime>("date"),
	CopyMeta("permalink", "canonical"),
	Markdown(),
	Execute((doc, ctx) =>
	{
		// Parse the document content and get each code element
		IHtmlDocument htmlDocument = htmlParser.Parse(doc.Content);
		foreach(IElement codeElement in htmlDocument.QuerySelectorAll("pre code"))
		{
			// Highlight and replace the inner HTML of the code element
			codeElement.InnerHtml = MyHelper.Highlight(colorizer, codeElement.InnerHtml, codeElement.ClassName, htmlParser);
		}
		// Replace the content of the input document with the new HTML
		return htmlDocument.Body.InnerHtml;
	}),
	Replace("@", "&#64;"),
	Meta("PostContent", @doc.Content),
	Meta("Excerpt", @doc.ContainsKey("excerpt")
		? @doc.String("excerpt")
		: MyHelper.GetFirstWords(MyHelper.StripHtml(@doc.Content), 75, "&#8230;")),
	Razor()
		.WithViewStart("_layouts/_ViewStart.cshtml"),
	MinifyHtml(),
	WriteFiles("." + @doc["permalink"] + "index.html")
);

Pipelines.Add("Archives",
	ReadFiles("_layouts/archive.cshtml"),
	Execute(@ctx.Documents
		.WhereContainsKey("date")
		.SelectMany(x => {
			var items = new[]{ "yyyy", "yyyy/MM", "yyyy/MM/dd" };
			return items.Select(d => new
				{
					DateFormat = d,
					DateValue = x.Get<DateTime>("date").ToString(d),
					DateTitle = x.Get<DateTime>("date").ToString(string.Join(" ", d.Split('/').Reverse()).Replace("MM", "MMMM"))
				}
			);
		})
		.Distinct()
		.Select(x => @ctx.GetDocument(@doc, new Dictionary<string, object>()
			{
				{ "ArchiveDateFormat", x.DateFormat },
				{ "ArchiveDate", x.DateValue },
				{ "title", "Archive for posts dated '" + x.DateTitle + "'" }
			})
		)
	),
	CopyMeta("ArchiveDate", "canonical", "/{0}/"),
	Razor()
		.WithViewStart("_layouts/_ViewStart.cshtml"),
	MinifyHtml(),
	WriteFiles(@doc["ArchiveDate"] + "/index.html")
);

Pipelines.Add("Tags",
	ReadFiles("_layouts/tags.cshtml"),
	Execute(@ctx.Documents
		.WhereContainsKey("tags")
		.SelectMany(x => x.Get<string[]>("tags"))
		.Distinct(StringComparer.InvariantCultureIgnoreCase)
		.Select(x => @ctx.GetDocument(@doc, new Dictionary<string, object>()
			{
				{ "title", "Archive for posts tagged with '" + x + "'" },
				{ "displayTag", x },
				{ "tag", MyHelper.CleanTag(x) }
			})
		)
	),
	CopyMeta("tag", "canonical", "/tag/{0}/"),
	Razor()
		.WithViewStart("_layouts/_ViewStart.cshtml"),
	MinifyHtml(),
	WriteFiles("./tag/" + @doc.String("tag") + "/index.html")
);

Pipelines.Add("TagListing",
	ReadFiles("_layouts/tagListing.cshtml"),
	FrontMatter(Yaml()),
	CopyMeta("permalink", "canonical"),
	Razor()
		.WithViewStart("_layouts/_ViewStart.cshtml"),
	MinifyHtml(),
	WriteFiles("." + @doc["permalink"] + "index.html")
);

Pipelines.Add("Pages",
	ReadFiles("_pages/**/*.md"),
	FrontMatter(Yaml()),
	Markdown()
		.EscapeAt(false),
	Meta("canonical", @doc.String("RelativeFilePathBase").Replace("_pages/", "/") + "/"),
	Razor()
		.WithViewStart("_layouts/_ViewStart.cshtml"),
	MinifyHtml(),
	WriteFiles(@doc.String("RelativeFilePathBase").Replace("_pages/", "") + "/index.html")
);

Pipelines.Add("Homepage",
	ReadFiles("_layouts/index.cshtml"),
	FrontMatter(Yaml()),
	Meta("canonical", "/"),
	Razor()
		.WithViewStart("_layouts/_ViewStart.cshtml"),
	MinifyHtml(),
	WriteFiles()
);

Pipelines.Add("Feeds",
	ReadFiles("_layouts/feed-*.cshtml"),
	FrontMatter(Yaml()),
	Razor(),
	MinifyXml(),
	WriteFiles()
);

Pipelines.Add("XmlSitemap",
	Documents(@ctx.Documents)
		.Where(@doc.ContainsKey("canonical")),
	OrderBy(@doc.String("canonical")),
	Meta("SitemapItem", new SitemapItem("https://" + Settings[Keys.Host] + @doc.String("canonical")) { LastModUtc = @doc.Get<DateTime?>("date", null) }),
	Sitemap(),
	Meta("WritePath", "sitemap.xml"),
	WriteFiles()
);

Pipelines.Add("Assets",
	CopyFiles("_assets/**/*{!.cshtml,!.md,!.less,}")
		.To(x => x.Path.FullPath.Replace("input/_assets/", "output/"))
);
